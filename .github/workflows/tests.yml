# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see:
#  https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8, 3.9]

    steps:
    # -----------------------------------------
    # this configures a pre-built version of Python
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # -----------------------------------------
    # Caches python dependencies using 'key' which is a hash of python-version and requirements.txt
    - name: Cache pip
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ matrix.python-version }}-pip-
          ${{ matrix.python-version }}-
    # -----------------------------------------
    # Install the JVM which is required by hivejdbc and pytest
    - name: Install JVM
      run: |
        sudo apt -y install default-jre
    # -----------------------------------------
    # run test suite using `pytest` and generate coverage report.
    # see pytest.ini for cli options automatically passed to `pytest`
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -r requirements.txt
    # ----------------------------------------
    # run all tests with pytest, all options and arguments for pytest are configured in pytest.ini
    - name: Test with pytest
      run:
        pytest
    # next run tox, tox will test the packaging and installation against the current Python environment
    - name: Test with tox
      # Run tox using the version of Python in `PATH`
      run: |
        tox -e py
    # make sure markdown document is parseable.
    - name: Check setup.py and README
      run: |
        pip3 install twine
        pip3 install wheel
        python3 setup.py bdist_wheel
        twine check dist/*
    - name: README Link check
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-verbose-mode: 'yes'
        file-path: './README.md'
    # ----------------------------------------
    # publish usage report generated by `pytest` to Coveralls.io
    # this uses the Python package `coveralls` to interface with Coveralls.
    - name: Coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      run: |
        coveralls